// prisma/schema.prisma
// PPMS Â· Prisma Schema (Next.js + NestJS + PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Enums (canonical)
========================= */
enum OrderStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  SHIPPED
  CANCELLED
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  DONE
  HOLD
  CANCELLED
}

enum StageType {
  FIBER
  FIBER_DYED
  FIBER_BLENDED
  ROVEN
  SINGLE_YARN
  WINDED_YARN
  DOUBLE_YARN
  TWISTED_YARN
}

enum MoveDir {
  IN
  OUT
}

enum WasteType {
  CLEAN_OCHES
  DIRTY_OCHES
  ERCHTEI
}

enum ReservationStatus {
  ACTIVE
  RELEASED
  FULFILLED
  CANCELLED
}

enum IoKind {
  INPUT
  OUTPUT
}

/* =========================
   Master / Reference
========================= */
model Customer {
  id         Int      @id @default(autoincrement())
  name       String
  abb_name   String?
  email      String?
  mobile     String?
  address    String?
  phone      String?
  fax        String?
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  orders     Order[]
  outputs    ProductionOutput[] @relation("OutputOwnerCustomer")

  @@map("customer")
}

model Employee {
  id                   Int      @id @default(autoincrement())
  name                 String
  email                String   @unique
  password_hash        String
  password_reset_token String?
  active               Boolean  @default(true)
  created_at           DateTime @db.Timestamptz(6) @default(now())
  updated_at           DateTime @db.Timestamptz(6) @updatedAt

  roles         EmployeeRole[]
  ordersManaged Order[]         @relation("OrderOwner")
  stageExecs1   StageExecution[] @relation("Pic1")

  @@map("employee")
}

model Role {
  id         Int      @id @default(autoincrement())
  name_en    String
  name_mn    String?
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  employees EmployeeRole[]

  @@map("role")
}

model EmployeeRole {
  employee_id Int
  role_id     Int
  created_at  DateTime @db.Timestamptz(6) @default(now())
  updated_at  DateTime @db.Timestamptz(6) @updatedAt

  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  role     Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([employee_id, role_id])
  @@map("employee_role")
}

model FactoryProcess {
  id         Int      @id @default(autoincrement()) // seed: P1..P7 + RECEIVING + SHIPPING
  code       String   @unique                      // e.g. P1_RECEIVING, P2_DYEING, ...
  name_en    String
  name_mn    String?
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  orderSteps OrderProcess[]
  stageExecs StageExecution[]
  wastes     Waste[]
  ioRules    IoRule[]
  wasteRules WasteRule[]

  @@map("factory_process")
}

model FiberType {
  id         String   @id // wool, cashmere, ...
  name       String
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  outputs ProductionOutput[]
  wastes  Waste[]

  @@map("fiber_type")
}

model Color {
  id         String   @id
  name       String
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  orders  Order[]
  outputs ProductionOutput[]
  wastes  Waste[]

  @@map("color")
}

model Bobbin {
  id         Int      @id @default(autoincrement())
  name       String
  weight_g   Decimal  @db.Decimal(12, 3) // nominal bobbin weight (grams)
  created_at DateTime @db.Timestamptz(6) @default(now())
  updated_at DateTime @db.Timestamptz(6) @updatedAt

  outputs ProductionOutput[]

  @@map("bobbin")
}

/* =========================
   Orders & Route
========================= */
model Order {
  id          Int          @id @default(autoincrement())
  order_no    String       @unique
  customer_id Int
  recorded_at DateTime     @db.Timestamptz(6)
  color_id    String?
  weight_kg   Decimal?     @db.Decimal(12, 3)
  status      OrderStatus  @default(DRAFT)
  owner_id    Int?
  started_at  DateTime?    @db.Timestamptz(6)
  finished_at DateTime?    @db.Timestamptz(6)
  created_at  DateTime     @db.Timestamptz(6) @default(now())
  updated_at  DateTime     @db.Timestamptz(6) @updatedAt

  customer Customer  @relation(fields: [customer_id], references: [id])
  color    Color?    @relation(fields: [color_id], references: [id])
  owner    Employee? @relation("OrderOwner", fields: [owner_id], references: [id])

  steps        OrderProcess[]
  stages       StageExecution[]
  outputs      ProductionOutput[]
  reservations Reservation[]
  wastes       Waste[]
  stockMoves   StockMove[]
  outputLinks  OutputLink[]

  @@map("orders")
}

model OrderProcess {
  order_id   Int
  process_id Int
  seq        Int
  active     Boolean @default(true)
  required   Boolean @default(true)

  order   Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  process FactoryProcess @relation(fields: [process_id], references: [id])

  @@id([order_id, process_id])
  @@unique([order_id, seq])
  @@map("order_process")
}

/* =========================
   Stage Execution
========================= */
model StageExecution {
  id           Int           @id @default(autoincrement())
  order_id     Int
  process_id   Int
  stage        StageType
  status       ProcessStatus @default(PENDING)
  lot_num      String?
  batch_num    Int?
  pic_id1      Int?
  started_at   DateTime?     @db.Timestamptz(6)
  finished_at  DateTime?     @db.Timestamptz(6)
  note         String?
  created_at   DateTime      @db.Timestamptz(6) @default(now())
  updated_at   DateTime      @db.Timestamptz(6) @updatedAt

  order   Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  process FactoryProcess @relation(fields: [process_id], references: [id])
  pic1    Employee?      @relation("Pic1", fields: [pic_id1], references: [id])

  outputs    ProductionOutput[]
  wastes     Waste[]
  stockMoves StockMove[]

  @@index([order_id, process_id])
  @@index([order_id, stage, started_at])
  @@index([lot_num])
  @@index([batch_num])
  @@map("stage_execution")
}

/* =========================
   Outputs (semi/finished)
========================= */
model ProductionOutput {
  id                Int       @id @default(autoincrement())
  order_id          Int?
  owner_customer_id Int?      // set when order_id is NULL (pre-order stock)
  stage_exec_id     Int
  stage             StageType
  recorded_at       DateTime  @db.Timestamptz(6)
  fiber_type_id     String
  color_id          String?
  lot_num           String?
  batch_num         Int?
  rough_weight_kg   Decimal?  @db.Decimal(12, 3)
  bale_weight_kg    Decimal?  @db.Decimal(12, 3)
  con_weight_kg     Decimal?  @db.Decimal(12, 3)
  moisture_pct      Decimal?  @db.Decimal(5, 2)
  bobbin_type_id    Int?
  bobbin_count      Int       @default(0)
  details           Json?
  created_at        DateTime  @db.Timestamptz(6) @default(now())
  updated_at        DateTime  @db.Timestamptz(6) @updatedAt

  order  Order?           @relation(fields: [order_id], references: [id], onDelete: SetNull)
  owner  Customer?        @relation("OutputOwnerCustomer", fields: [owner_customer_id], references: [id])
  stage_exec  StageExecution   @relation(fields: [stage_exec_id], references: [id], onDelete: Cascade)
  fiber  FiberType        @relation(fields: [fiber_type_id], references: [id])
  color  Color?           @relation(fields: [color_id], references: [id])
  bobbin Bobbin?          @relation(fields: [bobbin_type_id], references: [id])

  reservations Reservation[]
  stockMoves   StockMove[]
  fromLinks    OutputLink[] @relation("FromOutput")
  toLinks      OutputLink[] @relation("ToOutput")

  @@index([order_id])
  @@index([owner_customer_id])
  @@index([stage, recorded_at])
  @@index([lot_num])
  @@index([batch_num])
  @@map("production_output")
}

/* =========================
   Reservation
========================= */
model Reservation {
  id              Int                @id @default(autoincrement())
  order_id        Int
  output_id       Int
  qty_reserved_kg Decimal            @db.Decimal(12, 3)
  status          ReservationStatus  @default(ACTIVE)
  reserved_at     DateTime           @db.Timestamptz(6) @default(now())
  released_at     DateTime?          @db.Timestamptz(6)
  created_at      DateTime           @db.Timestamptz(6) @default(now())
  updated_at      DateTime           @db.Timestamptz(6) @updatedAt

  order  Order            @relation(fields: [order_id], references: [id], onDelete: Cascade)
  output ProductionOutput @relation(fields: [output_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([output_id])
  @@map("reservation")
}

/* =========================
   Waste
========================= */
model Waste {
  id            Int       @id @default(autoincrement())
  order_id      Int
  stage_exec_id Int
  process_id    Int
  waste_type    WasteType
  recorded_at   DateTime  @db.Timestamptz(6)
  fiber_type_id String
  color_id      String?
  bale_num      Int?
  weight_kg     Decimal   @db.Decimal(12, 3)
  moisture_pct  Decimal?  @db.Decimal(5, 2)
  created_at    DateTime  @db.Timestamptz(6) @default(now())
  updated_at    DateTime  @db.Timestamptz(6) @updatedAt

  order   Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  stage   StageExecution @relation(fields: [stage_exec_id], references: [id], onDelete: Cascade)
  process FactoryProcess @relation(fields: [process_id], references: [id])
  fiber   FiberType      @relation(fields: [fiber_type_id], references: [id])
  color   Color?         @relation(fields: [color_id], references: [id])

  stockMoves StockMove[]

  @@index([order_id, process_id, recorded_at])
  @@map("waste")
}

/* =========================
   Inventory Ledger
========================= */
model StockMove {
  id            Int       @id @default(autoincrement())
  order_id      Int
  stage_exec_id Int
  direction     MoveDir
  qty_kg        Decimal   @db.Decimal(12, 3)
  recorded_at   DateTime  @db.Timestamptz(6)
  location_id   Int?
  output_id     Int?
  waste_id      Int?
  note          String?
  created_at    DateTime  @db.Timestamptz(6) @default(now())
  updated_at    DateTime  @db.Timestamptz(6) @updatedAt

  order  Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  stage  StageExecution @relation(fields: [stage_exec_id], references: [id])
  output ProductionOutput? @relation(fields: [output_id], references: [id], onDelete: SetNull)
  waste  Waste?            @relation(fields: [waste_id], references: [id], onDelete: SetNull)

  @@index([order_id, recorded_at])
  @@index([output_id])
  @@index([waste_id])
  @@map("stock_move")
}

/* =========================
   Genealogy with quantities
========================= */
model OutputLink {
  id              Int      @id @default(autoincrement())
  order_id        Int
  from_output_id  Int
  to_output_id    Int
  qty_consumed_kg Decimal  @db.Decimal(12, 3)
  note            String?
  linked_at       DateTime @db.Timestamptz(6) @default(now())
  created_at      DateTime @db.Timestamptz(6) @default(now())

  order      Order            @relation(fields: [order_id], references: [id], onDelete: Cascade)
  fromOutput ProductionOutput @relation("FromOutput", fields: [from_output_id], references: [id], onDelete: Cascade)
  toOutput   ProductionOutput @relation("ToOutput", fields: [to_output_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([from_output_id])
  @@index([to_output_id])
  @@unique([order_id, from_output_id, to_output_id])
  @@map("output_link")
}

/* =========================
   Lightweight rules
========================= */
model IoRule {
  process_id Int
  kind       IoKind
  stage      StageType

  process FactoryProcess @relation(fields: [process_id], references: [id], onDelete: Cascade)

  @@id([process_id, kind, stage])
  @@map("io_rule")
}

model WasteRule {
  process_id Int
  waste      WasteType

  process FactoryProcess @relation(fields: [process_id], references: [id], onDelete: Cascade)

  @@id([process_id, waste])
  @@map("waste_rule")
}
